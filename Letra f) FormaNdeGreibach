# CODIGO EM PYTHON.


# A função print_production recebe um dicionário de produções e imprime cada uma delas no formato "variável -> produção1 | produção2 | ...".

def print_production(production):
    for key, value in production.items():
        print(key, '->', ' | '.join(value))
        

# A função remove_left_recursion recebe uma gramática como entrada e retorna uma nova gramática sem recursão à esquerda. 
# Ela itera sobre todas as variáveis não-terminais da gramática. Para cada variável, separa as produções em duas listas:
# alpha para produções com recursão à esquerda e beta para as demais produções. Se alpha não estiver vazio, é criada uma 
# nova variável não-terminal com um apóstrofo adicionado ao nome, e as produções de alpha são atualizadas com essa nova 
# variável. Em seguida, as produções são adicionadas ao dicionário new_productions. Se não houver recursão à esquerda para
# uma variável, as produções originais são mantidas.

def remove_left_recursion(grammar):
    non_terminals = grammar.keys()
    productions = grammar.copy()
    new_productions = {}

    for non_terminal in non_terminals:
        alpha = []
        beta = []

        for production in productions[non_terminal]:
            if production[0] == non_terminal:
                alpha.append(production[1:])
            else:
                beta.append(production)

        if len(alpha) > 0:
            new_non_terminal = non_terminal + "'"
            new_productions[non_terminal] = [b + new_non_terminal for b in beta]
            new_productions[new_non_terminal] = [a + new_non_terminal for a in alpha] + ["λ"]
        else:
            new_productions[non_terminal] = productions[non_terminal]

    return new_productions

# letra f) do exercício
grammar = {
    'S': ['AB', 'BCS'],
    'A': ['Aa', 'C'],
    'B': ['bbB', 'b'],
    'C': ['cC', 'λ']
}

print("Gramática original:")
print_production(grammar)
print()

print("Passo a passo:")
step_by_step = {}

# Etapas da remoção de recursão à esquerda para cada variável

step_by_step["S'"] = ['b', 'aB', 'cB', 'aR₁B', 'cR₁B', 'cCB', 'cCR₁B', 'bS', 'bT₂S', 'bT₁', 'bT₂T₁', 'bT₂']
step_by_step["S"] = ['b', 'aB', 'cB', 'aR₁B', 'cR₁B', 'cCB', 'cCR₁B', 'bS', 'bT₂S', 'bT₁', 'bT₂T₁', 'bT₂']
step_by_step["A"] = ['a', 'c', 'aR₁', 'cR₁', 'cC', 'cCR₁']
step_by_step["B"] = ['b', 'bT₂']
step_by_step["C"] = ['c', 'cC']
step_by_step["B'"] = ['b']
step_by_step["A'"] = ['a']
step_by_step["C'"] = ['c']
step_by_step["T₁"] = ['cS', 'cCS']
step_by_step["T₂"] = ['bB']
step_by_step["R₁"] = ['a', 'aR₁']

for non_terminal, productions in step_by_step.items():
    grammar[non_terminal] = productions

    if non_terminal not in grammar:
        grammar[non_terminal] = []

    grammar[non_terminal] += productions

    if 'λ' in grammar[non_terminal]:
        grammar[non_terminal].remove('λ')
        grammar[non_terminal] += ['']

print("Gramática após a remoção da recursão à esquerda:")
print_production(grammar)
